//WITH AWS ECR
pipeline {
    agent {
        docker { image 'php:7.4.33-apache' }
    }
    // agent any
    options {
        skipDefaultCheckout true
        disableConcurrentBuilds()
    }
    environment {
        ecrRepository = "004510841606.dkr.ecr.us-east-1.amazonaws.com/php-app"
        NAME = "php-app"
    }    
    stages{
        stage('checkout') {
            steps {
               git branch: 'main', credentialsId: 'github_private_key', url: 'https://github.com/JosephatEze/php.git'
            }
        }
        stage('Install Composer') {
            steps {
                sh 'composer install' //--ignore-platform-req=ext-mbstring --ignore-platform-req=ext-dom'
            }
        }
        stage("PHPLint") {
            steps {
                sh 'find app -name "*.php" -print0 | xargs -0 -n1 php -l'
            }
        }
        stage("PHPUnit") {
            steps {
                sh 'vendor/phpunit/phpunit/phpunit --bootstrap build/bootstrap.php --configuration phpunit-coverage.xml'
                //sh './vendor/bin/phpunit --bootstrap ./vendor/autoload.php ./tests/quotetest.php'
            }
        }
        stage('Build docker image'){
            steps{
                sh "docker build -t ${NAME} ."
            }
        }
        stage('push image to ECR'){
            steps{
                withAWS(region: 'eu-west-1', role: 'jenkins') {
                    sh "aws ecr describe-repositories --repository-names ${NAME} || aws ecr create-repository --repository-name ${NAME} --image-scanning-configuration scanOnPush=true"
                    sh "aws ecr get-login-password | docker login --username AWS --password-stdin"
                    sh "docker tag ${NAME} ${ecrRepository}/${NAME}:${BUILD_NUMBER}"
                    sh "docker push ${ecrRepository}/${NAME}:${BUILD_NUMBER}"
                }
            }
        }
        stage('deploy app') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS' 
                }
            }
            steps {
                sh 'aws eks --region us-east-1 update-kubeconfig --name <eks-cluster-name>'
                //using helm chart to deploy
                sh 'cd k8s/helm'
                sh 'helm upgrade --atomic --install --cleanup-on-fail -n default <release-name> <./chart-name>'
                //using deployment files
                sh 'cd k8s/deployment-file'
                sh ' kubectl apply -f ~/k8s/templates/customer-service-deploy.yml'
                //sh 'helm install [app-name] [chart]'
            }
        //deploying with kubeconfig stored as credential secret file    
        //steps {   
            //script {
               // withKubeConfig([credentialsId: 'K8S', serverUrl: '']) {
               // sh ('kubectl apply -f  eks-deploy-k8s.yaml')
               // }
            //}
       }
    }
    post{
        always{
            script{
                RESULT=(currentBuild.result == null ? "SUCCESSFUL" : currentBuild.result)
            }
        }
        success{
            script{
                println "Success"
                mail bcc: 'josephat@getreliancehealth.com', body: "*BUILD SUCCESSFUL*\n*JOB:* ${env.JOB_NAME}\n*BUILD ID:* <${env.BUILD_URL}|[${env.BUILD_NUMBER}]>\n*SOURCE_BRANCH:* ${params.SOURCE_BRANCH}\n*COMMIT_HASH:* <${GIT_URL_REPO}/commit/${GIT_HASH_RED}|[${GIT_HASH_RED}]>\n*COMMIT MESSAGE:* ${GIT_COMMIT_MSG}\n*ENVIRONMENT:* ${CLUSTER_NAME} - ${REGION}", cc: 'hakeem@getreliancehealth.com', from: '', replyTo: '', subject: 'JENKIN JOB', to: 'marcus@getreliancehealth.com'
            }
        }
        failure{
            script{
                println "Failure"
                mail bcc: 'josephat@getreliancehealth.com', body: "*BUILD FAILED*\n*JOB:* ${env.JOB_NAME}\n*BUILD ID:* <${env.BUILD_URL}|[${env.BUILD_NUMBER}]>\n*SOURCE_BRANCH:* ${params.SOURCE_BRANCH}\n*COMMIT_HASH:* <${GIT_URL_REPO}/commit/${GIT_HASH_RED}|[${GIT_HASH_RED}]>\n*COMMIT MESSAGE:* ${GIT_COMMIT_MSG}\n*ENVIRONMENT:* ${CLUSTER_NAME} - ${REGION}", cc: 'hakeem@getreliancehealth.com', from: '', replyTo: '', subject: 'JENKIN JOB', to: 'marcus@getreliancehealth.com'  
            }
        }
    }
}
